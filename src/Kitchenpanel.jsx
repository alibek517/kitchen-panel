import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useNavigate, useLocation } from 'react-router-dom';
import { socket } from './socket';
import './KitchenPanel.css';

function KitchenPanel() {
  const [orders, setOrders] = useState([]);
  const [isConnected, setIsConnected] = useState(socket.connected);
  const [isLoading, setIsLoading] = useState(true);
  const [updatingItems, setUpdatingItems] = useState(new Set());
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const navigate = useNavigate();
  const location = useLocation();

  // –ò—á–∏–º–ª–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Å–∏–Ω–∏ –∞–Ω–∏“õ–ª–∞—à
  const isDrinkCategory = (product) => {
    if (!product) return false;
    return (
      product.categoryId === 10 ||
      product.category?.name === '–ò—á–∏–º–ª–∏–∫' ||
      product.category?.id === 10
    );
  };

  // “≤–æ–∑–∏—Ä–≥–∏ —Å–∞“≥–∏—Ñ–∞–Ω–∏ –∞–Ω–∏“õ–ª–∞—à
  const getCurrentPage = () => {
    const path = location.pathname;
    if (path === '/kitchen') return 'home';
    if (path === '/archive') return 'archive';
    return 'home';
  };

  // –ò—á–∏–º–ª–∏–∫ –∏—Ç–µ–º–ª–∞—Ä–∏–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç READY “õ–∏–ª–∏—à
  const autoUpdateDrinkItems = async (orders) => {
    const drinkItems = [];
    
    orders.forEach((order) => {
      order.orderItems.forEach((item) => {
        if (isDrinkCategory(item.product) && item.status === 'PENDING') {
          drinkItems.push(item);
        }
      });
    });

    if (drinkItems.length === 0) return;

    console.log(`ü•§ ${drinkItems.length} —Ç–∞ –∏—á–∏–º–ª–∏–∫ –∞–≤—Ç–æ–º–∞—Ç –∏—à–ª–æ–≤ –±–µ—Ä–∏–ª–º–æ“õ–¥–∞...`);

    for (const item of drinkItems) {
      try {
        console.log(`ü•§ –ò—á–∏–º–ª–∏–∫ READY “õ–∏–ª–∏–Ω–º–æ“õ–¥–∞: ${item.product.name} (ID: ${item.id})`);
        setUpdatingItems((prev) => new Set(prev).add(item.id));

        // –§–∞“õ–∞—Ç WebSocket –æ—Ä“õ–∞–ª–∏ —è–Ω–≥–∏–ªa—à
        socket.emit('update_order_item_status', {
          itemId: item.id,
          status: 'READY',
        });

        // –Ø–Ω–≥–∏–ªa—à–¥–∞–Ω –∫–µ–π–∏–Ω –∫—É—Ç–∏—à (WebSocket “≥–æ–¥–∏—Å–∞—Å–∏–≥–∞ –∏—à–æ–Ω–∞–º–∏–∑)
        await new Promise((resolve) => setTimeout(resolve, 300));
      } catch (error) {
        console.error('‚ùå –ò—á–∏–º–ª–∏–∫ –∞–≤—Ç–æ–º–∞—Ç —è–Ω–≥–∏–ªa—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫:', error);
      } finally {
        setUpdatingItems((prev) => {
          const newSet = new Set(prev);
          newSet.delete(item.id);
          return newSet;
        });
      }
    }
  };

  // API –æ—Ä“õ–∞–ª–∏ –æ—Ä–¥–µ—Ä–ª–∞—Ä–Ω–∏ –æ–ª–∏—à (—Ñ–∞“õ–∞—Ç –±–æ—à–ª–∞–Ω“ì–∏—á —é–∫–ª–∞—à —É—á—É–Ω)
  const fetchOrders = async () => {
    try {
      setIsLoading(true);
      const res = await axios.get('https://alikafecrm.uz/order/kitchen');
      console.log('üì¶ –ë—É—é—Ä—Ç–º–∞–ª–∞—Ä —é–∫–ª–∞–Ω–¥–∏:', res.data);
      setOrders(res.data);
      setTimeout(() => autoUpdateDrinkItems(res.data), 500);
    } catch (error) {
      console.error('‚ùå –ë—É—é—Ä—Ç–º–∞–ª–∞—Ä–Ω–∏ –æ–ª–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫:', error);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    // –ë–æ—à–ª–∞–Ω“ì–∏—á —é–∫–ª–∞—à
    fetchOrders();

    // WebSocket “≥–æ–¥–∏—Å–∞–ª–∞—Ä–∏
    const handleConnect = () => {
      console.log('üü¢ –û—à—Ö–æ–Ω–∞ –ü–∞–Ω–µ–ª–∏: WebSocket —É–ª–∞–Ω–¥–∏');
      setIsConnected(true);
    };

    const handleDisconnect = () => {
      console.log('üî¥ –û—à—Ö–æ–Ω–∞ –ü–∞–Ω–µ–ª–∏: WebSocket —É–∑–∏–ª–¥–∏');
      setIsConnected(false);
    };

    const handleOrderCreated = (newOrder) => {
      console.log('üÜï –Ø–Ω–≥–ò –±—É—é—Ä—Ç–º–∞ –∫–µ–ª–¥–∏:', newOrder);
      setOrders((prevOrders) => {
        if (prevOrders.some((order) => order.id === newOrder.id)) {
          return prevOrders;
        }
        const updatedOrders = [...prevOrders, newOrder];
        setTimeout(() => autoUpdateDrinkItems([newOrder]), 200);
        return updatedOrders;
      });
    };

    const handleOrderUpdated = (updatedOrder) => {
      console.log('üîÑ –ë—É—é—Ä—Ç–º–∞ —è–Ω–≥–∏–ª–∞–Ω–¥–∏:', updatedOrder);
      if (!updatedOrder.orderItems || !updatedOrder.table) {
        console.log(`‚ö†Ô∏è –¢—û–ª–∏“õ –º–∞—ä–ª—É–º–æ—Ç –∫–µ–ª–º–∞–¥–∏, state —è–Ω–≥–∏–ª–∞–Ω–º–æ“õ–¥–∞...`);
        return;
      }

      setOrders((prevOrders) =>
        prevOrders.map((order) =>
          order.id === updatedOrder.id ? updatedOrder : order
        )
      );

      // –Ø–Ω–≥–∏–ª–∞–Ω–≥–∞–Ω –±—É—é—Ä—Ç–º–∞–¥–∞–≥–∏ –∏—á–∏–º–ª–∏–∫–ª–∞—Ä–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à
      setTimeout(() => autoUpdateDrinkItems([updatedOrder]), 200);
    };

    const handleOrderDeleted = ({ id }) => {
      console.log(`üóëÔ∏è –ë—É—é—Ä—Ç–º–∞ —û—á–∏—Ä–∏–ª–¥–∏:`, id);
      setOrders((prevOrders) => prevOrders.filter((order) => order.id !== id));
    };

    const handleOrderItemStatusUpdated = (updatedItem) => {
      console.log('üìù –ò—Ç–µ–º —Å—Ç–∞—Ç—É—Å —è–Ω–≥–∏–ª–∞–Ω–¥–∏:', updatedItem);
      if (!updatedItem.product || !updatedItem.product.name) {
        console.log(`‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç –º–∞—ä–ª—É–º–æ—Ç–∏ –π—û“õ`);
        return;
      }

      setOrders((prevOrders) =>
        prevOrders.map((order) => ({
          ...order,
          orderItems: order.orderItems.map((item) =>
            item.id === updatedItem.id ? { ...item, ...updatedItem } : item
          ),
        }))
      );
      setUpdatingItems((prev) => {
        const newSet = new Set(prev);
        newSet.delete(updatedItem.id);
        return newSet;
      });
    };

    const handleOrderItemDeleted = ({ id }) => {
      console.log(`üóëÔ∏è –ò—Ç–µ–º —û—á–∏—Ä–∏–ª–¥–∏:`, id);
      setOrders((prevOrders) =>
        prevOrders.map((order) => ({
          ...order,
          orderItems: order.orderItems.filter((item) => item.id !== id),
        }))
      );
    };

    socket.on('connect', handleConnect);
    socket.on('disconnect', handleDisconnect);
    socket.on('orderCreated', handleOrderCreated);
    socket.on('orderUpdated', handleOrderUpdated);
    socket.on('orderDeleted', handleOrderDeleted);
    socket.on('orderItemStatusUpdated', handleOrderItemStatusUpdated);
    socket.on('orderItemDeleted', handleOrderItemDeleted);

    // –§–∞“õ–∞—Ç —Ö–∞—Ç–æ–ª–∏–∫ –±—û–ª—Å–∞ —ë–∫–∏ WebSocket –∏—à–ª–∞–º–∞—Å–∞ polling
    const pollInterval = setInterval(() => {
      if (!socket.connected) {
        console.log('üîÑ WebSocket —É–∑–∏–ª–≥–∞–Ω, polling –∏—à–ª–∞—Ç–∏–ª–º–æ“õ–¥–∞...');
        fetchOrders();
      }
    }, 60000); // 60 —Å–æ–Ω–∏—è–¥–∞ –±–∏—Ä –º–∞—Ä—Ç–∞

    // Cleanup
    return () => {
      socket.off('connect', handleConnect);
      socket.off('disconnect', handleDisconnect);
      socket.off('orderCreated', handleOrderCreated);
      socket.off('orderUpdated', handleOrderUpdated);
      socket.off('orderDeleted', handleOrderDeleted);
      socket.off('orderItemStatusUpdated', handleOrderItemStatusUpdated);
      socket.off('orderItemDeleted', handleOrderItemDeleted);
      clearInterval(pollInterval);
    };
  }, []);

  // –û—Ä–¥–µ—Ä –∏—Ç–µ–º —Å—Ç–∞—Ç—É—Å–Ω–∏ —è–Ω–≥–∏–ªa—à
  const updateOrderItemStatus = async (itemId, status) => {
    try {
      console.log(`üîÑ –ò—Ç–µ–º ${itemId} —Å—Ç–∞—Ç—É—Å ${status}–≥–∞ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–º–æ“õ–¥–∞...`);
      setUpdatingItems((prev) => new Set(prev).add(itemId));
      socket.emit('update_order_item_status', { itemId, status });
    } catch (error) {
      console.error('‚ùå –°—Ç–∞—Ç—É—Å —è–Ω–≥–∏–ªa—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫:', error);
      setUpdatingItems((prev) => {
        const newSet = new Set(prev);
        newSet.delete(itemId);
        return newSet;
      });
    }
  };

  // –í–∞“õ—Ç–Ω–∏ —Ñ–æ—Ä–º–∞—Ç–ª–∞—à
  const formatTime = (dateString) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffInMinutes = Math.floor((now - date) / (1000 * 60));

    if (diffInMinutes < 60) {
      return `${diffInMinutes} –¥–∞“õ–∏“õ–∞ –æ–ª–¥–∏–Ω`;
    }
    return date.toLocaleTimeString('uz-Cyrl-UZ', {
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  // –ö—û—Ä–∏–Ω–∞–¥–∏–≥–∞–Ω –æ—Ä–¥–µ—Ä–ª–∞—Ä–Ω–∏ —Ñ–∏–ª—å—Ç—Ä–ª–∞—à
  const visibleOrders = orders.filter(
    (order) =>
      ['PENDING', 'COOKING'].includes(order.status) &&
      order.orderItems.some(
        (item) =>
          ['PENDING', 'COOKING'].includes(item.status) &&
          item.product &&
          !isDrinkCategory(item.product)
      )
  );

  // Menu functions
  const toggleMenu = () => {
    setIsMenuOpen(!isMenuOpen);
  };

  const closeMenu = () => {
    setIsMenuOpen(false);
  };

  const handleMenuItemClick = (action) => {
    closeMenu();
    switch (action) {
      case 'home':
        navigate('/kitchen');
        break;
      case 'archive':
        navigate('/archive');
        break;
      case 'logout':
        navigate('/logout');
        break;
      default:
        break;
    }
  };

  const currentPage = getCurrentPage();

  // Helper function to get role text
  const getRoleText = (role) => {
    switch (role) {
      case 'CASHIER':
        return '–û—Ñ–∏—Ü–∏–∞–Ω—Ç';
      case 'CUSTOMER':
        return '–ê–¥–º–∏–Ω';
      default:
        return role || '–ù–æ–º–∞—ä–ª—É–º';
    }
  };

  return (
    <div className="kitchen-panel">
      {/* Hamburger Menu */}
      <div className={`hamburger-menu ${isMenuOpen ? 'open' : ''}`}>
        <button 
          className={`hamburger-btn ${isConnected ? 'connected' : 'disconnected'}`}
          onClick={toggleMenu}
        >
          <span></span>
          <span></span>
          <span></span>
        </button>
      </div>

      {/* Sidebar Menu */}
      <div className={`sidebar-menu ${isMenuOpen ? 'open' : ''}`}>
        <div className="sidebar-overlay" onClick={closeMenu}></div>
        <div className="sidebar-content">
          <div className="sidebar-header">
            <h3>–ú–µ–Ω—é</h3>
            <button className="close-btn" aria-label="Close menu" onClick={closeMenu}>√ó</button>
          </div>
          <div className="sidebar-items">
            <button 
              className={`sidebar-item ${currentPage === 'home' ? 'active' : ''} ${isConnected ? 'connected' : 'disconnected'}`}
              onClick={() => handleMenuItemClick('home')}
            >
              <span className="sidebar-icon">üè†</span>
              –ë–æ—à —Å–∞“≥–∏—Ñ–∞
            </button>
            <button 
              className={`sidebar-item ${currentPage === 'archive' ? 'active' : ''} ${isConnected ? 'connected' : 'disconnected'}`}
              onClick={() => handleMenuItemClick('archive')}
            >
              <span className="sidebar-icon">üìÅ</span>
              –ê—Ä—Ö–∏–≤
            </button>
            <button 
              className={`sidebar-item logout ${isConnected ? 'connected' : 'disconnected'}`}
              onClick={() => handleMenuItemClick('logout')}
            >
              <span className="sidebar-icon">üö™</span>
              –ß–∏“õ–∏—à
            </button>
          </div>
        </div>
      </div>

      <header className="kitchen-header">
        <div className="header-content">
          <h1 className="kitchen-title">
            <span className="kitchen-icon">üë®‚Äçüç≥</span>
            –û—à—Ö–æ–Ω–∞ –ü–∞–Ω–µ–ª–∏
          </h1>
          <div className="header-right">
            <div className={`connection-status ${isConnected ? 'connected' : 'disconnected'}`}>
              <span className={`status-dot ${isConnected ? 'connected' : 'disconnected'}`}></span>
              <div className="user-info">
                <span className="user-role">–û—à–ø–∞–∑: </span>
                <span className="user-name">{localStorage.getItem('user') || `–ù–æ–º–∞—ä–ª—É–º`}</span>
              </div>
            </div>
          </div>
        </div>
      </header>

      <div className="main-content">
        {isLoading ? (
          <div className="loading-container">
            <div className="loading-spinner"></div>
            <p className="loading-text">–ë—É—é—Ä—Ç–º–∞–ª–∞—Ä —é–∫–ª–∞–Ω–º–æ“õ–¥–∞...</p>
          </div>
        ) : visibleOrders.length === 0 ? (
          <div className="no-orders">
            <div className="no-orders-icon">üçΩÔ∏è</div>
            <h3>“≤–æ–∑–∏—Ä —Ñ–∞–æ–ª –±—É—é—Ä—Ç–º–∞ –π—û“õ</h3>
            <p>–Ø–Ω–≥–∏ –±—É—é—Ä—Ç–º–∞–ª–∞—Ä –∫–µ–ª–≥–∞–Ω–¥–∞ –±—É –µ—Ä–¥–∞ –∫—û—Ä–∏–Ω–∞–¥–∏</p>
            <small style={{ color: '#666', marginTop: '10px', display: 'block' }}>
              üí° –ò—á–∏–º–ª–∏–∫–ª–∞—Ä –∞–≤—Ç–æ–º–∞—Ç –¢–∞–π—ë—Ä “õ–∏–ª–∏–Ω–∞–¥–∏
            </small>
          </div>
        ) : (
          <div className="orders-grid">
            {visibleOrders.map((order) => (
              <div className="order-card" key={order.id}>
                <div className="order-header">
                  <div className="order-info">
                    <h3 className="table-number">
                      <span className="table-icon">ü™ë</span>
                      –°—Ç–æ–ª {order.table?.number || 'N/A'}
                    </h3>
                    <p className="order-time">
                      <span className="time-icon">üïí</span>
                      {formatTime(order.createdAt)}
                    </p>
                    <div className="order-user-info">
                      <span className="user-role bold large">
                        {getRoleText(order.user?.role)}: 
                      </span> 
                      <span className="user-name smaller">
                        {order.user?.name || '–ù–æ–º–∞—ä–ª—É–º'}
                      </span>
                    </div>
                  </div>
                  <div className={`order-status status-${order.status?.toLowerCase()}`}>
                    {order.status === 'PENDING' ? '‚è≥ –ö—É—Ç–∏–ª–º–æ“õ–¥–∞' : 'üî• –ü–∏—à–∏—Ä–∏–ª–º–æ“õ–¥–∞'}
                  </div>
                </div>

                <div className="order-items">
                  {order.orderItems
                    .filter(
                      (item) =>
                        ['PENDING', 'COOKING'].includes(item.status) &&
                        item.product &&
                        !isDrinkCategory(item.product)
                    )
                    .map((item) => (
                      <div key={item.id} className="order-item">
                        <div className="item-details">
                          <div className="item-header">
                            <span className="item-name">
                              {item.product?.name || '–ú–∞“≥—Å—É–ª–æ—Ç –Ω–æ–º–∏ —é–∫–ª–∞–Ω–º–æ“õ–¥–∞...'}
                            </span>
                            <span className="item-count">√ó{item.count}</span>
                          </div>
                          <div className={`item-status status-${item.status?.toLowerCase()}`}>
                            {item.status === 'PENDING' ? '‚è≥ –ö—É—Ç–∏–ª–º–æ“õ–¥–∞' : 'üî• –ü–∏—à–∏—Ä–∏–ª–º–æ“õ–¥–∞'}
                          </div>
                        </div>

                        <div className="item-actions">
                          {item.status === 'PENDING' && (
                            <button
                              className="action-btn start-btn"
                              onClick={() => updateOrderItemStatus(item.id, 'COOKING')}
                              disabled={updatingItems.has(item.id)}
                            >
                              {updatingItems.has(item.id) ? (
                                <>
                                  <span className="btn-spinner"></span>
                                  –ë–æ—à–ª–∞–Ω—è–ø—Ç–∏...
                                </>
                              ) : (
                                <>
                                  <span className="btn-icon">‚ñ∂Ô∏è</span>
                                  –ü–∏—à–∏—Ä–∏—à–Ω–∏ –±–æ—à–ª–∞—à
                                </>
                              )}
                            </button>
                          )}
                          {item.status === 'COOKING' && (
                            <button
                              className="action-btn done-btn"
                              onClick={() => updateOrderItemStatus(item.id, 'READY')}
                              disabled={updatingItems.has(item.id)}
                            >
                              {updatingItems.has(item.id) ? (
                                <>
                                  <span className="btn-spinner"></span>
                                  –¢—É–≥–∞–ª–ª–∞–Ω–º–æ“õ–¥–∞...
                                </>
                              ) : (
                                <>
                                  <span className="btn-icon">‚úÖ</span>
                                  –¢–∞–π—ë—Ä –¥–µ–± –±–µ–ª–≥–∏–ª–∞—à
                                </>
                              )}
                            </button>
                          )}
                        </div>
                      </div>
                    ))}
                </div>

                {order.orderItems.some((item) => isDrinkCategory(item.product)) && (
                  <div className="drinks-info">
                    <small style={{ color: '#28a745', fontStyle: 'italic' }}>
                      ü•§ –ë—É –±—É—é—Ä—Ç–º–∞–¥–∞–≥–∏ –∏—á–∏–º–ª–∏–∫–ª–∞—Ä –∞–≤—Ç–æ–º–∞—Ç–∏–∫ –¢–∞–π–æ—Ä “õ–∏–ª–∏–Ω–¥–∏
                      <br />
                      <span style={{ fontSize: '0.8em', color: '#666' }}>
                        –ò—á–∏–º–ª–∏–∫–ª–∞—Ä: {' '}
                        {order.orderItems
                          .filter((item) => isDrinkCategory(item.product))
                          .map((item) => `${item.product.name} (√ó${item.count})`)
                          .join(', ')}
                      </span>
                    </small>
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}

export default KitchenPanel;